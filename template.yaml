AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aspire-sam

  SAM Template for aspire-sam

Parameters:
  dbUserPassword:
    NoEcho: true
    Type: String
    Default: 'password'
  dbUserName:
    NoEcho: true
    Type: String
    Default: 'master'
  dbInstanceClass:
    Type: String
    Default: 'db.t2.micro'
  dbInstanceIdentifier:
    Type: String
    Default: 'aspire-db-master'
  dbName:
    Type: String
    Default: 'main_db'
  # cognitoUserPool:
  #   Type: String
  #   Default: 'AspireUserPool'
  # cognitoUserPoolArn:
  #   Type: String
  #   Default: ''

Globals:
  Function:
    Runtime: python3.6
    Timeout: 30
  Api:
    Cors:
      AllowMethods: "'OPTIONS,GET,POST,PUT'"
      AllowHeaders: "'Content-Type,Authorization,Access-Control-Allow-Origin'"
      AllowOrigin: "'https://max-aspire-frontend.herokuapp.com'"

Resources:
  # --- Infrastructure ---
  AspireDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: !Ref dbInstanceClass
      DBInstanceIdentifier: !Ref dbInstanceIdentifier
      DBName: !Ref dbName
      EnableCloudwatchLogsExports:
        - postgresql
      EnablePerformanceInsights: true
      Engine: postgres
      EngineVersion: "11.6"
      MasterUsername: !Ref dbUserName
      MasterUserPassword: !Ref dbUserPassword
      MaxAllocatedStorage: 1000
      PubliclyAccessible: true
      StorageType: gp2

  DatabaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: max-aspire-database
      ContentUri: src/layers/database/dependencies/
      CompatibleRuntimes:
        - python3.6

  # AuthLayer:
  #   Type: AWS::Serverless::LayerVersion
  #   Properties:
  #     LayerName: max-aspire-auth
  #     ContentUri: src/layers/auth/dependencies/
  #     CompatibleRuntimes:
  #       - python3.6

  AspireApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      # Auth:
      #   DefaultAuthorizer: !Ref cognitoUserPool
      #   AddDefaultAuthorizerToCorsPreflight: False
      #   Authorizers:
      #     AspireUserPoolTestAuthorizer:
      #       UserPoolArn: !Ref cognitoUserPoolArn

  CreateDatabaseModels:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/CreateDatabaseModels
      Handler: lambda_function.handler
      Events:
          CreateDatabaseModelsEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /create-db-models
              Method: post
      Layers:
        - Ref: DatabaseLayer
  # --- Infrastructure ---

# --- Chats Service ---
# git is not tracking this change?
  CreateChat:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/CreateChat
      Handler: lambda_function.handler
      Description: Lambda function to create new chat
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chat
            Method: post
      Layers:
        - Ref: DatabaseLayer
 
  GetChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/GetChatById
      Handler: lambda_function.handler
      Description: Lambda function to get chat by Id
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chat/{chatId}
            Method: get
      Layers:
        - Ref: DatabaseLayer

  EditChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/EditChatById
      Handler: lambda_function.handler
      Description: Lambda function to edit chat by Id
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chat/{chatId}
            Method: put
      Layers:
        - Ref: DatabaseLayer   

  DeleteChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/DeleteChatById
      Handler: lambda_function.handler
      Description: Lambda function to delete chat by Id
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chat/{chatId}
            Method: delete
      Layers:
        - Ref: DatabaseLayer

  GetAllChats:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/GetAllChats
      Handler: lambda_function.handler
      Description: Lambda function to get all chats
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats
            Method: get
      Layers:
        - Ref: DatabaseLayer

  ReserveChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/ReserveChatById
      Handler: lambda_function.handler
      Description: Lambda function to reserve a chat
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chat/{chatId}/reserve
            Method: put
      Layers:
        - Ref: DatabaseLayer

  UnReserveChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/UnreserveChatById
      Handler: lambda_function.handler
      Description: Lambda function to reserve a chat
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chat/{chatId}/unreserve
            Method: put
      Layers:
        - Ref: DatabaseLayer
  # --- Chats Service ---   

  # --- Jobs Service ---
  CreateJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/CreateJob
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs
              Method: post
      Layers:
        - Ref: DatabaseLayer

  GetAllJobs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/GetAllJobs
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs
              Method: get
      Layers:
        - Ref: DatabaseLayer

  GetJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/GetJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}
              Method: get
      Layers:
        - Ref: DatabaseLayer

  DeleteJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/DeleteJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}
              Method: delete
      Layers:
        - Ref: DatabaseLayer

  EditJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/EditJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}
              Method: put
      Layers:
        - Ref: DatabaseLayer

  CloseJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/CloseJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}/close
              Method: put
      Layers:
        - Ref: DatabaseLayer

  JobContactById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/JobContactById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job_contact/{jobId}
              Method: get
      Layers:
        - Ref: DatabaseLayer       
  # --- Jobs Service ---

  # --- Job Applications Service ---
  
  CreateJobApplication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/CreateJobApplication
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications
              Method: post
      Layers:
        - Ref: DatabaseLayer

  GetAllJobApplications:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/GetAllJobApplications
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications
              Method: get
      Layers:
        - Ref: DatabaseLayer

  DeleteJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/DeleteJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications/{jobAppId}
              Method: delete
      Layers:
        - Ref: DatabaseLayer

  GetJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/GetJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications/{jobAppId}
              Method: get
      Layers:
        - Ref: DatabaseLayer

  EditJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/EditJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications/{jobAppId}
              Method: put
      Layers:
        - Ref: DatabaseLayer
  # --- Job Applications Service ---

  # --- Industry Tags Service ---
  IndustryTagsCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/Create
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags
              Method: post
      Layers:
        - Ref: DatabaseLayer

  IndustryTagsGetAll:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/GetAll
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags
              Method: get
      Layers:
        - Ref: DatabaseLayer

  IndustryTagsGetById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/GetById
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags/{industryTagId}
              Method: get
      Layers:
        - Ref: DatabaseLayer

  IndustryTagsDeleteById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/DeleteById
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags/{industryTagId}
              Method: delete
      Layers:
        - Ref: DatabaseLayer
        # - Ref: AuthLayer
  # --- Industry Tags Service ---

  # --- Payments Service ---

  StripePaymentProcessor:
    Type: AWS::Serverless::Function 
    Properties:
        CodeUri: src/lambda/payment
        Handler: lambda_function.handler
        Events:
            Payment:  
              Type: Api
              Properties:
                RestApiId: !Ref AspireApi
                Path: /payment
                Method: post
        Layers:
          - Ref: DatabaseLayer

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  AspireApiId:
    Description: "Aspire API ID"
    Value: !Ref AspireApi

  AspireApiUrl:
    Description: "Aspire API endpoint URL for Prod environment"
    Value: !Sub 'https://${AspireApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'

