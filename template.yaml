AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aspire-sam

  SAM Template for aspire-sam

Parameters:
  DbUserPassword:
    NoEcho: true
    Type: String
    Default: 'password'
  DbUserName:
    NoEcho: true
    Type: String
    Default: 'master'
  DbInstanceClass:
    Type: String
    Default: 'db.t2.micro'
  DbInstanceIdentifier:
    Type: String
    Default: 'aspire-db-master'
  DbName:
    Type: String
    Default: 'main_db'
  CognitoUserPoolArn:
    Type: String
    Default: 'arn:aws:cognito-idp:us-east-1:143848191537:userpool/us-east-1_dq5r8O2SO'
  CustomDomainName:
    Type: String
    Default: 'services-d.aspire.maxgala.com'
  CertificateArn:
    Type: String
    Default: 'arn:aws:acm:us-east-1:143848191537:certificate/19abc70f-4949-4ed8-9c71-37834cfac7db'

Globals:
  Function:
    Runtime: python3.6
    Timeout: 120

Resources:
  # --- Infrastructure ---
  AspireDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      DBInstanceClass: !Ref DbInstanceClass
      DBInstanceIdentifier: !Ref DbInstanceIdentifier
      DBName: !Ref DbName
      EnableCloudwatchLogsExports:
        - postgresql
      EnablePerformanceInsights: true
      Engine: postgres
      EngineVersion: "11.6"
      MasterUsername: !Ref DbUserName
      MasterUserPassword: !Ref DbUserPassword
      MaxAllocatedStorage: 1000
      PubliclyAccessible: true
      StorageType: gp2

  DatabaseLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: max-aspire-database
      ContentUri: src/layers/database/dependencies/
      CompatibleRuntimes:
        - python3.6

  AuthLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: max-aspire-auth
      ContentUri: src/layers/auth/dependencies/
      CompatibleRuntimes:
        - python3.6

  SesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: max-aspire-email
      ContentUri: src/layers/ses_layer/dependencies/
      CompatibleRuntimes:
        - python3.6

  CognitoLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: max-aspire-cognito
      ContentUri: src/layers/cognito/dependencies/
      CompatibleRuntimes:
        - python3.6

  AspireApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: AspireUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers:
          AspireUserPoolAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
      Cors:
        AllowMethods: "'OPTIONS,GET,POST,PUT'"
        AllowHeaders: "'Content-Type,Authorization,Access-Control-Allow-Origin'"
        AllowOrigin: "'*'"
      EndpointConfiguration:
        Type: REGIONAL
      Domain:
        DomainName: !Ref CustomDomainName
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: REGIONAL
        BasePath:
          - api
  
  CreateDatabaseModels:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/CreateDatabaseModels
      Handler: lambda_function.handler
      Events:
          CreateDatabaseModelsEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /create-db-models
              Method: post
      Layers:
        - Ref: DatabaseLayer
  # --- Infrastructure ---

# --- Chats Service ---
  ChatCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/Create
      Handler: lambda_function.handler
      Description: Lambda function to create new chat
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
      Events:
        ChatCreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats
            Method: post
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer

  ChatCreateMultiple:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/CreateMultiple
      Handler: lambda_function.handler
      Description: Lambda function to create new chats
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
      Events:
        ChatCreateMultipleEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/create-multiple
            Method: post
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer

  ChatGetById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/GetById
      Handler: lambda_function.handler
      Description: Lambda function to get chat by Id
      Events:
        ChatGetByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/{chatId}
            Method: get
      Layers:
        - Ref: DatabaseLayer

  ChatEditById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/EditById
      Handler: lambda_function.handler
      Description: Lambda function to edit chat by Id
      Events:
        ChatEditByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/{chatId}
            Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  ChatDeleteById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/DeleteById
      Handler: lambda_function.handler
      Description: Lambda function to delete chat by Id
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
      Events:
        ChatDeleteByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/{chatId}
            Method: delete
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer

  ChatGetAll:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/GetAll
      Handler: lambda_function.handler
      Description: Lambda function to get all chats
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
            Resource: '*'
      Events:
        ChatGetAllEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats
            Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: CognitoLayer

  ChatDeleteAll:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/DeleteAll
      Handler: lambda_function.handler
      Description: Lambda function to delete all chats
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
      Events:
        ChatDeleteAllEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats
            Method: delete
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer

  ChatReserveById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/ReserveById
      Handler: lambda_function.handler
      Description: Lambda function to reserve a chat
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
        ChatReserveByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/{chatId}/reserve
            Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer
        - Ref: SesLayer

  ChatUnreserveById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/UnreserveById
      Handler: lambda_function.handler
      Description: Lambda function to unreserve a chat
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
        ChatUnreserveByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/{chatId}/unreserve
            Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer
        - Ref: SesLayer

  ChatCancelById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/CancelById
      Handler: lambda_function.handler
      Description: Lambda function to cancel a chat
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
      Events:
        ChatCancelByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/{chatId}/cancel
            Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer

  ChatDoneById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/DoneById
      Handler: lambda_function.handler
      Description: Lambda function to mark done a chat
      Events:
        ChatDoneByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /chats/{chatId}/done
            Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
  # --- Chats Service ---

  # --- SE Connect Service ---
  ConnectCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Connect/Create
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
        ConnectCreateEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /connect
            Method: post
      Layers:
        - Ref: DatabaseLayer
        - Ref: SesLayer
        - Ref: CognitoLayer

  ConnectGetAll:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Connect/GetAll
      Handler: lambda_function.handler
      Events:
        ConnectGetAllEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /connect
            Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: CognitoLayer

  ConnectGetById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Connect/GetById
      Handler: lambda_function.handler
      Events:
        ConnectGetByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /connect/{connectId}
            Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: CognitoLayer

  ConnectEditById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Connect/EditById
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
        ConnectEditByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /connect/{connectId}
            Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: SesLayer
        - Ref: CognitoLayer

  ConnectDeleteById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Connect/DeleteById
      Handler: lambda_function.handler
      Events:
        ConnectDeleteByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /connect/{connectId}
            Method: delete
      Layers:
        - Ref: DatabaseLayer
        - Ref: CognitoLayer
  # --- SE Connect Service ---

  # --- Jobs Service ---
  CreateJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/CreateJob
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs
              Method: post
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: SesLayer

  GetAllJobs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/GetAllJobs
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs
              Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  GetJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/GetJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}
              Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  DeleteJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/DeleteJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}
              Method: delete
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  EditJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/EditJobById
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}
              Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: SesLayer

  CloseJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/CloseJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}/close
              Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  RejectJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/RejectJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /jobs/{jobId}/reject
              Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  AutomaticallyApproveJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/AutomaticallyApproveJob
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
        ApproveJobScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 day)
      Layers:
        - Ref: DatabaseLayer
        - Ref: SesLayer

  JobContactById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/JobContactById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job_contact/{jobId}
              Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
  # --- Jobs Service ---

  # --- Job Applications Service ---
  CreateJobApplication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/CreateJobApplication
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPostConfSESSendPolicy
            Effect: Allow
            Action:
              - ses:SendEmail
              - ses:SendRawEmail
            Resource: '*'
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications
              Method: post
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: SesLayer

  GetAllJobApplications:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/GetAllJobApplications
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications
              Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  DeleteJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/DeleteJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications/{id}
              Method: delete
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  GetJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/GetJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications/{id}
              Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  EditJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/EditJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /job-applications/{id}
              Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
  # --- Job Applications Service ---

  # --- Industry Tags Service ---
  IndustryTagsCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/Create
      Handler: lambda_function.handler
      Events:
          IndustryTagsCreate:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags
              Method: post
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  IndustryTagsGetAll:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/GetAll
      Handler: lambda_function.handler
      Events:
          IndustryTagsGetAll:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags
              Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  IndustryTagsGetById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/GetById
      Handler: lambda_function.handler
      Events:
          IndustryTagsGetById:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags/{industryTagId}
              Method: get
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer

  IndustryTagsDeleteById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/DeleteById
      Handler: lambda_function.handler
      Events:
          IndustryTagsDeleteById:
            Type: Api
            Properties:
              RestApiId: !Ref AspireApi
              Path: /industry-tags/{industryTagId}
              Method: delete
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
  # --- Industry Tags Service ---

  # --- Payments Service ---
  StripePaymentProcessor:
    Type: AWS::Serverless::Function
    Properties:
        CodeUri: src/lambda/Payment
        Handler: lambda_function.handler
        Events:
            Payment:
              Type: Api
              Properties:
                RestApiId: !Ref AspireApi
                Path: /payment
                Method: post
                Auth:
                  Authorizer: NONE
        Layers:
          - Ref: DatabaseLayer
  # --- Payments Service ---

  # --- Users Service ---
  UserGetById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/User/GetById
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
            Resource: '*'
      Events:
        UserGetByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /users/{userId}
            Method: get
      Layers:
        - Ref: CognitoLayer

  UserGetAll:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/User/GetAll
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
            Resource: '*'
      Events:
        UserGetAllEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /users
            Method: get
      Layers:
        - Ref: AuthLayer
        - Ref: CognitoLayer
  
  UserEditById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/User/EditById
      Handler: lambda_function.handler
      Description: Lambda function to edit user by Id
      Events:
        UserEditByIdEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /users/{userId}
            Method: put
      Layers:
        - Ref: AuthLayer
        - Ref: CognitoLayer

  UserUpdateCredits:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/User/UpdateCredits
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
      Events:
        UserUpdateCreditsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /users/credits
            Method: put
      Layers:
        - Ref: AuthLayer
        - Ref: CognitoLayer

  UserEnable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/User/Enable
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:AdminEnableUser
            Resource: '*'
      Events:
        UserEnableEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /users/enable
            Method: put
      Layers:
        - Ref: AuthLayer
        - Ref: CognitoLayer

  UserDisable:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/User/Disable
      Handler: lambda_function.handler
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:AdminDisableUser
            Resource: '*'
      Events:
        UserDisableEvent:
          Type: Api
          Properties:
            RestApiId: !Ref AspireApi
            Path: /users/disable
            Method: put
      Layers:
        - Ref: AuthLayer
        - Ref: CognitoLayer
  # --- Users Service ---

  # --- Scheduler Service ---
  SchedulerSchedule:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Scheduler/Schedule
      Handler: lambda_function.handler
      Description: Lambda function to schedule chats
      Policies:
        - Statement:
          - Sid: CognitoPolicy
            Effect: Allow
            Action:
              - cognito-idp:ListUsers
              - cognito-idp:AdminUpdateUserAttributes
            Resource: '*'
      Events:
          SchedulerScheduleEvent:
            Type: Api
            Properties:
              Path: /scheduler
              Method: put
      Layers:
        - Ref: DatabaseLayer
        - Ref: AuthLayer
        - Ref: CognitoLayer
  # --- Scheduler Service ---

Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  AspireApiId:
    Description: "Aspire API ID"
    Value: !Ref AspireApi

  AspireApiUrl:
    Description: "Aspire API endpoint URL"
    Value: !Sub 'https://${AspireApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
