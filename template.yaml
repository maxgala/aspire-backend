AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  aspire-sam

  SAM Template for aspire-sam

Parameters:
  dbUserPassword:
    NoEcho: true
    Type: String
    Default: 'password'
  dbUserName:
    NoEcho: true
    Type: String
    Default: 'master'
  dbInstanceClass:
    Type: String
    Default: 'db.t2.micro'
  dbInstanceIdentifier:
    Type: String
    Default: 'aspire-db'
  dbName:
    Type: String
    Default: 'main_db'

Globals:
  Function:
    Runtime: python3.6
    Timeout: 30

Resources:
  # --- Infrastructure ---
  AspireDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '20'
      BackupRetentionPeriod: 7
      CopyTagsToSnapshot: true
      DBInstanceClass: !Ref dbInstanceClass
      DBInstanceIdentifier: !Ref dbInstanceIdentifier
      DBName: !Ref dbName
      EnableCloudwatchLogsExports:
        - postgresql
      EnablePerformanceInsights: true
      Engine: postgres
      EngineVersion: "11.6"
      MasterUsername: !Ref dbUserName
      MasterUserPassword: !Ref dbUserPassword
      MaxAllocatedStorage: 1000
      PubliclyAccessible: true
      StorageType: gp2

  CommonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: max-aspire-common
      ContentUri: src/layers/database/dependencies/
      CompatibleRuntimes:
        - python3.6

  CreateDatabaseModels:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/CreateDatabaseModels
      Handler: lambda_function.handler
      Events:
          CreateDatabaseModelsEvent:
            Type: Api
            Properties:
              Path: /create-db-models
              Method: post
      Layers:
        - Ref: CommonDependenciesLayer
        
# --- Chats Service ---
  CreateChat:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/CreateChat
      Handler: lambda_function.handler
      Description: Lambda function to create new chat
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            Path: /chat
            Method: post
      Layers:
        - Ref: CommonDependenciesLayer
 
  GetChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/GetChatById
      Handler: lambda_function.handler
      Description: Lambda function to get chat by Id
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            Path: /chat/{chatId}
            Method: get
      Layers:
        - Ref: CommonDependenciesLayer
        
  EditChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/EditChatById
      Handler: lambda_function.handler
      Description: Lambda function to edit chat by Id
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            Path: /chat/{chatId}
            Method: put
      Layers:
        - Ref: CommonDependenciesLayer   
  
  DeleteChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/DeleteChatById
      Handler: lambda_function.handler
      Description: Lambda function to delete chat by Id
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            Path: /chat/{chatId}
            Method: delete
      Layers:
        - Ref: CommonDependenciesLayer
        
  GetAllChats:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/GetAllChats
      Handler: lambda_function.handler
      Description: Lambda function to get all chats
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            Path: /chats
            Method: get
      Layers:
        - Ref: CommonDependenciesLayer
        
  ReserveChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/ReserveChatById
      Handler: lambda_function.handler
      Description: Lambda function to reserve a chat
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            Path: /chats/{chatId}/reserve
            Method: put
      Layers:
        - Ref: CommonDependenciesLayer
        
  UnReserveChatById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Chat/UnreserveChatById
      Handler: lambda_function.handler
      Description: Lambda function to reserve a chat
      Events:
        CreateChatEvent:
          Type: Api
          Properties:
            Path: /chats/{chatId}/unreserve
            Method: put
      Layers:
        - Ref: CommonDependenciesLayer
        
  # --- End of Chats Service ---      
  
  # --- Jobs Service ---
  CreateJob:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/CreateJob
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /jobs
              Method: post
      Layers:
        - Ref: CommonDependenciesLayer

  GetAllJobs:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/GetAllJobs
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /jobs
              Method: get
      Layers:
        - Ref: CommonDependenciesLayer

  GetJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/GetJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /jobs/{jobId}
              Method: get
      Layers:
        - Ref: CommonDependenciesLayer 

  DeleteJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/DeleteJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /jobs/{jobId}
              Method: delete
      Layers:
        - Ref: CommonDependenciesLayer

  EditJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/EditJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /jobs/{jobId}
              Method: put
      Layers:
        - Ref: CommonDependenciesLayer
  CloseJobById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/CloseJobById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /jobs/{jobId}/close
              Method: put
      Layers:
        - Ref: CommonDependenciesLayer
  JobContactById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/Job/JobContactById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /job_contact/{jobId}
              Method: get
      Layers:
        - Ref: CommonDependenciesLayer       
  # --- Jobs Service ---

  # --- Job Applications Service ---
  
  CreateJobApplication:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/CreateJobApplication
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              Path: /job-applications
              Method: post
      Layers:
        - Ref: CommonDependenciesLayer

  GetAllJobApplications:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/GetAllJobApplications
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              Path: /job-applications
              Method: get
      Layers:
        - Ref: CommonDependenciesLayer

  DeleteJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/DeleteJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /job-applications/{jobAppId}
              Method: delete
      Layers:
        - Ref: CommonDependenciesLayer

  GetJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/GetJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /job-applications/{jobAppId}
              Method: get
      Layers:
        - Ref: CommonDependenciesLayer

  EditJobApplicationById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/JobApplications/EditJobApplicationById
      Handler: lambda_function.handler
      Events:
          CreateJobEvent:
            Type: Api
            Properties:
              Path: /job-applications/{jobAppId}
              Method: put
      Layers:
        - Ref: CommonDependenciesLayer
  # --- Job Applications Service ---

  # --- Industry Tags Service ---
  IndustryTagsCreate:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/Create
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              Path: /industry-tags
              Method: post
      Layers:
        - Ref: CommonDependenciesLayer

  IndustryTagsGetAll:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/GetAll
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              Path: /industry-tags
              Method: get
      Layers:
        - Ref: CommonDependenciesLayer

  IndustryTagsGetById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/GetById
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              Path: /industry-tags/{industryTagId}
              Method: get
      Layers:
        - Ref: CommonDependenciesLayer

  IndustryTagsDeleteById:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/IndustryTags/DeleteById
      Handler: lambda_function.handler
      Events:
          CreateJobApplicationEvent:
            Type: Api
            Properties:
              Path: /industry-tags/{industryTagId}
              Method: delete
      Layers:
        - Ref: CommonDependenciesLayer
  # --- Industry Tags Service ---

Outputs:
  CreateDatabaseModelsApi:
    Description: "API Gateway endpoint URL for Prod stage for CreateDatabaseModels function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/create-db-models/"
  JobApplicationsApi:
    Description: "API Gateway endpoints URL for Prod stage for Job Application functions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/job-applications/"
  JobsApi:
    Description: "API Gateway endpoints URL for Prod stage for Job Application functions"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/jobs/"
